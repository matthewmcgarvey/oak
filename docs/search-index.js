crystal_doc_search_index_callback({"repository_name":"github.com/obsidian/oak","body":"# Oak\nAnother [radix tree](https://en.wikipedia.org/wiki/Radix_tree) implementation for crystal-lang\n\n[![Build Status](https://img.shields.io/travis/obsidian/oak.svg)](https://travis-ci.org/obsidian/oak)\n[![Latest Tag](https://img.shields.io/github/tag/obsidian/oak.svg)](https://github.com/obsidian/oak/tags)\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  oak:\n    github: obsidian/oak\n```\n\n## Usage\n\n### Building Trees\n\nYou can associate one or more *payloads* with each path added to the tree:\n\n```crystal\nrequire \"oak\"\n\ntree = Oak::Tree(Symbol).new\ntree.add \"/products\", :products\ntree.add \"/products/featured\", :featured\n\nresults = tree.search \"/products/featured\"\n\nif result = results.first?\n  puts result.payload # => :featured\nend\n```\n\nThe types allowed for a payload are defined on Tree definition:\n\n```crystal\ntree = Oak::Tree(Symbol).new\n\n# Good, since Symbol is allowed as payload\ntree.add \"/\", :root\n\n# Compilation error, Int32 is not allowed\ntree.add \"/meaning-of-life\", 42\n```\n\nCan combine multiple types if needed:\n\n```crystal\ntree = Oak::Tree(Int32 | String | Symbol).new\n\ntree.add \"/\", :root\ntree.add \"/meaning-of-life\", 42\ntree.add \"/hello\", \"world\"\n```\n\n### Lookup and placeholders\n\nYou can also extract values from placeholders (as named or globbed segments):\n\n```crystal\ntree.add \"/products/:id\", :product\n\nresult = tree.find \"/products/1234\"\n\nif result\n  puts result.params[\"id\"]? # => \"1234\"\nend\n```\n\nPlease see `Oak::Tree#add` documentation for more usage examples.\n\n## Optionals\n\nOak has the ability to add optional paths, i.e. `foo(/bar)/:id`, which will expand\ninto two routes: `foo/bar/:id` and `foo/:id`. In the following example, both results\nwill match and return the same payload.\n\n```crystal\ntree.add \"/products(/free)/:id\", :product\n\nif result = tree.find \"/products/1234\"\n  puts result.params[\"id\"]? # => \"1234\"\n  puts result.payload # => :product\nend\n\nif result = tree.find \"/products/free/1234\"\n  puts result.params[\"id\"]? # => \"1234\"\n  puts result.payload # => :product\nend\n```\n\n## Caveats\n\n### Multiple results\n\nDue the the dynamic nature of this radix tree, and to allow for a more flexible\nexperience for the implementer, the `.search` method will return a list of results.\nAlternatively, you can interact with the results by providing a block.\n\n```crystal\nmatching_payload = nil\n@tree.search(path) do |result|\n  unless matching_payload\n    context.request.path_params = result.params\n    matching_payload = result.payloads.find do |payload|\n      payload.matches_constraints? context.request\n    end\n    matching_payload.try &.call(context)\n  end\nend\n```\n\n### Multiple Leaves\n\nIn order to allow for a more flexible experience for the implementer, this\nimplementation of radix will not error if a multiple payloads are added at the\nsame path/key. You can either call the `.payload` method to grab the first payload,\nor you can use the `.payloads` method, which will return all the payloads.\n\n### Shared Keys\n\nWhen designing and adding *paths* to a Tree, please consider that two different\nnamed parameters cannot share the same level:\n\n```crystal\ntree.add \"/\", :root\ntree.add \"/:post\", :post\ntree.add \"/:category/:post\", :category_post # => Radix::Tree::SharedKeyError\n```\n\nThis is because different named parameters at the same level will result in\nincorrect `params` when lookup is performed, and sometimes the value for\n`post` or `category` parameters will not be stored as expected.\n\nTo avoid this issue, usage of explicit keys that differentiate each path is\nrecommended.\n\nFor example, following a good SEO practice will be consider `/:post` as\nabsolute permalink for the post and have a list of categories which links to\na permalink of the posts under that category:\n\n```crystal\ntree.add \"/\", :root\ntree.add \"/:post\", :post                    # this is post permalink\ntree.add \"/categories\", :categories         # list of categories\ntree.add \"/categories/:category\", :category # listing of posts under each category\n```\n## Roadmap\n\n* [X] Support multiple payloads at the same level in the tree.\n* [X] Return multiple matches when searching the tree.\n* [X] Support optionals in the key path.\n* [ ] Overcome shared key caveat.\n\n## Implementation\n\nThis project has been inspired and adapted from:\n[luislavena](https://github.com/luislavena/radix)\n\n## Contributing\n\n1. Fork it ( https://github.com/obsidian/oak/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Jason Waldrip](https://github.com/jwaldrip) - creator, maintainer\n","program":{"html_id":"github.com/obsidian/oak/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/obsidian/oak","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/obsidian/oak/Oak","path":"Oak.html","kind":"module","full_name":"Oak","name":"Oak","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"oak/analyzer.cr","line_number":2,"url":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/analyzer.cr"},{"filename":"oak.cr","line_number":3,"url":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak.cr"}],"repository_name":"github.com/obsidian/oak","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"4.0.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/obsidian/oak/Oak/Result","path":"Oak/Result.html","kind":"struct","full_name":"Oak::Result(T)","name":"Result","abstract":false,"superclass":{"html_id":"github.com/obsidian/oak/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/obsidian/oak/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/obsidian/oak/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/obsidian/oak/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"oak/result.cr","line_number":1,"url":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr"}],"repository_name":"github.com/obsidian/oak","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/obsidian/oak/Oak","kind":"module","full_name":"Oak","name":"Oak"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(nodes,params)-class-method","html_id":"new(nodes,params)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"nodes","doc":null,"default_value":"","external_name":"nodes","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(nodes, params)","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L13","def":{"name":"new","args":[{"name":"nodes","doc":null,"default_value":"","external_name":"nodes","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Result(T).allocate\n_.initialize(nodes, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L10","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Result(T).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"found?-instance-method","html_id":"found?-instance-method","name":"found?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L16","def":{"name":"found?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!payloads.empty?"}},{"id":"key-instance-method","html_id":"key-instance-method","name":"key","doc":"The full resulting key.","summary":"<p>The full resulting key.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L30","def":{"name":"key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |io|\n  @nodes.each do |node|\n    io << node.key\n  end\nend"}},{"id":"params-instance-method","html_id":"params-instance-method","name":"params","doc":"The named params found in the result.","summary":"<p>The named params found in the result.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L5","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params"}},{"id":"payload-instance-method","html_id":"payload-instance-method","name":"payload","doc":"Returns the first payload in the result.","summary":"<p>Returns the first payload in the result.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L25","def":{"name":"payload","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"payloads.first"}},{"id":"payload?-instance-method","html_id":"payload?-instance-method","name":"payload?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L20","def":{"name":"payload?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"payloads.first?"}},{"id":"payloads-instance-method","html_id":"payloads-instance-method","name":"payloads","doc":"The matching payloads of the result.","summary":"<p>The matching payloads of the result.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/result.cr#L8","def":{"name":"payloads","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@payloads"}}],"macros":[],"types":[]},{"html_id":"github.com/obsidian/oak/Oak/SharedKeyError","path":"Oak/SharedKeyError.html","kind":"class","full_name":"Oak::SharedKeyError","name":"SharedKeyError","abstract":false,"superclass":{"html_id":"github.com/obsidian/oak/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/obsidian/oak/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/obsidian/oak/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/obsidian/oak/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"oak/shared_key_error.cr","line_number":2,"url":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/shared_key_error.cr"}],"repository_name":"github.com/obsidian/oak","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/obsidian/oak/Oak","kind":"module","full_name":"Oak","name":"Oak"},"doc":"The error class that is returned in the case of a shared key conflict.","summary":"<p>The error class that is returned in the case of a shared key conflict.</p>","class_methods":[],"constructors":[{"id":"new(new_key,existing_key)-class-method","html_id":"new(new_key,existing_key)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"new_key","doc":null,"default_value":"","external_name":"new_key","restriction":""},{"name":"existing_key","doc":null,"default_value":"","external_name":"existing_key","restriction":""}],"args_string":"(new_key, existing_key)","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/shared_key_error.cr#L3","def":{"name":"new","args":[{"name":"new_key","doc":null,"default_value":"","external_name":"new_key","restriction":""},{"name":"existing_key","doc":null,"default_value":"","external_name":"existing_key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(new_key, existing_key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/obsidian/oak/Oak/Tree","path":"Oak/Tree.html","kind":"struct","full_name":"Oak::Tree(T)","name":"Tree","abstract":false,"superclass":{"html_id":"github.com/obsidian/oak/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/obsidian/oak/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/obsidian/oak/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/obsidian/oak/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"oak/tree.cr","line_number":4,"url":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/tree.cr"}],"repository_name":"github.com/obsidian/oak","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/obsidian/oak/Oak","kind":"module","full_name":"Oak","name":"Oak"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/tree.cr#L4","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"add(path,payload)-instance-method","html_id":"add(path,payload)-instance-method","name":"add","doc":"Add a path to the tree.","summary":"<p>Add a path to the tree.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":""}],"args_string":"(path, payload)","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/tree.cr#L8","def":{"name":"add","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"payload","doc":null,"default_value":"","external_name":"payload","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@root.add(path, payload)"}},{"id":"find(path)-instance-method","html_id":"find(path)-instance-method","name":"find","doc":"Find the first matching result in the tree.","summary":"<p>Find the first matching result in the tree.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/tree.cr#L13","def":{"name":"find","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(search(path)).first? || Result(T).new"}},{"id":"search(path)-instance-method","html_id":"search(path)-instance-method","name":"search","doc":"Search the tree and return all results as an array.","summary":"<p>Search the tree and return all results as an array.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/tree.cr#L18","def":{"name":"search","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"([] of Result(T)).tap do |results|\n  search(path) do |result|\n    results << result\n  end\nend"}},{"id":"search(path,&block:Oak::Result(T)->_)-instance-method","html_id":"search(path,&amp;block:Oak::Result(T)-&gt;_)-instance-method","name":"search","doc":"Search the tree and yield each result to the block.","summary":"<p>Search the tree and yield each result to the block.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &block : Oak::Result(T) -> _)","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/tree.cr#L27","def":{"name":"search","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Result(T) -> _)"},"return_type":"","visibility":"Public","body":"Searcher(T).search(@root, path, Result(T).new, &block)"}},{"id":"visualize-instance-method","html_id":"visualize-instance-method","name":"visualize","doc":"Visualize the radix tree structure.","summary":"<p>Visualize the radix tree structure.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/obsidian/oak/blob/133a2dcf3e1222e276316098c255b9a3baa34904/src/oak/tree.cr#L32","def":{"name":"visualize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@root.visualize"}}],"macros":[],"types":[]}]}]}})